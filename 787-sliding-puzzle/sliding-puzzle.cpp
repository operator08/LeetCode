class Solution {
public:
    int slidingPuzzle(vector<vector<int>>& board) {
        static const unordered_map<int, int> d = {
            {123450, 0}, {123405, 1}, {123045, 2}, {23145, 3}, {203145, 4},
            {230145, 5}, {235140, 6}, {235104, 7}, {235014, 8}, {35214, 9},
            {305214, 10}, {350214, 11}, {354210, 12}, {354201, 13}, {354021, 14},
            {54321, 15}, {504321, 14}, {540321, 13}, {541320, 12}, {541302, 11},
            {541032, 10}, {41532, 9}, {401532, 8}, {410532, 7}, {412530, 6},
            {412503, 5}, {412053, 4}, {12453, 3}, {102453, 2}, {120453, 1},
            {152403, 3}, {152043, 4}, {52143, 5}, {502143, 6}, {520143, 7},
            {523140, 8}, {523104, 9}, {523014, 10}, {23514, 11}, {203514, 12},
            {230514, 13}, {234510, 14}, {234501, 15}, {234051, 16}, {34251, 15},
            {304251, 14}, {340251, 15}, {341250, 16}, {341205, 15}, {341025, 14},
            {41325, 13}, {401325, 12}, {410325, 11}, {415320, 10}, {415302, 9},
            {415032, 8}, {15432, 7}, {105432, 6}, {150432, 5}, {152430, 4},
            {135402, 5}, {135042, 6}, {35142, 7}, {305142, 8}, {350142, 9},
            {352140, 10}, {352104, 11}, {352014, 12}, {52314, 13}, {502314, 14},
            {520314, 15}, {524310, 16}, {524301, 15}, {524031, 16}, {24531, 15},
            {204531, 14}, {240531, 13}, {241530, 12}, {241503, 11}, {241053, 10},
            {41253, 9}, {401253, 8}, {410253, 7}, {413250, 6}, {413205, 5},
            {413025, 4}, {13425, 3}, {103425, 2}, {130425, 3}, {135420, 4},
            {403215, 6}, {43215, 7}, {243015, 6}, {243105, 5}, {243150, 6},
            {240153, 7}, {204153, 8}, {24153, 9}, {124053, 10}, {124503, 11},
            {124530, 12}, {120534, 13}, {102534, 14}, {12534, 15}, {512034, 16},
            {512304, 15}, {512340, 14}, {510342, 13}, {501342, 12}, {51342, 13},
            {351042, 14}, {351402, 13}, {351420, 14}, {350421, 13}, {305421, 12},
            {35421, 11}, {435021, 10}, {435201, 9}, {435210, 8}, {430215, 7},
            {405231, 10}, {45231, 11}, {245031, 12}, {245301, 13}, {245310, 14},
            {240315, 15}, {204315, 16}, {24315, 15}, {324015, 14}, {324105, 13},
            {324150, 14}, {320154, 13}, {302154, 12}, {32154, 13}, {132054, 14},
            {132504, 15}, {132540, 16}, {130542, 17}, {103542, 16}, {13542, 17},
            {513042, 16}, {513402, 15}, {513420, 14}, {510423, 13}, {501423, 12},
            {51423, 11}, {451023, 10}, {451203, 9}, {451230, 10}, {450231, 11},
            {521403, 13}, {521043, 14}, {21543, 13}, {201543, 12}, {210543, 13},
            {213540, 14}, {213504, 13}, {213054, 14}, {13254, 15}, {103254, 14},
            {130254, 15}, {134250, 16}, {134205, 15}, {134025, 14}, {34125, 13},
            {304125, 12}, {340125, 11}, {345120, 10}, {345102, 9}, {345012, 10},
            {45312, 11}, {405312, 10}, {450312, 11}, {452310, 12}, {452301, 13},
            {452031, 14}, {52431, 15}, {502431, 16}, {520431, 15}, {521430, 14},
            {532401, 17}, {532041, 18}, {32541, 19}, {302541, 18}, {320541, 19},
            {321540, 20}, {321504, 19}, {321054, 20}, {21354, 19}, {201354, 18},
            {210354, 19}, {214350, 18}, {214305, 17}, {214035, 18}, {14235, 17},
            {104235, 16}, {140235, 17}, {145230, 18}, {145203, 17}, {145023, 18},
            {45123, 19}, {405123, 20}, {450123, 21}, {453120, 20}, {453102, 19},
            {453012, 18}, {53412, 17}, {503412, 16}, {530412, 17}, {532410, 18},
            {403152, 18}, {43152, 17}, {143052, 16}, {143502, 15}, {143520, 14},
            {140523, 13}, {104523, 12}, {14523, 13}, {514023, 14}, {514203, 13},
            {514230, 14}, {510234, 15}, {501234, 16}, {51234, 17}, {251034, 18},
            {251304, 17}, {251340, 16}, {250341, 15}, {205341, 14}, {25341, 15},
            {325041, 14}, {325401, 13}, {325410, 14}, {320415, 15}, {302415, 16},
            {32415, 17}, {432015, 18}, {432105, 19}, {432150, 20}, {430152, 19},
            {402135, 18}, {42135, 17}, {142035, 16}, {142305, 15}, {142350, 16},
            {140352, 15}, {104352, 14}, {14352, 15}, {314052, 16}, {314502, 15},
            {314520, 16}, {310524, 17}, {301524, 18}, {31524, 19}, {531024, 18},
            {531204, 17}, {531240, 16}, {530241, 15}, {503241, 14}, {53241, 15},
            {253041, 14}, {253401, 13}, {253410, 14}, {250413, 15}, {205413, 16},
            {25413, 17}, {425013, 18}, {425103, 19}, {425130, 20}, {420135, 19},
            {215403, 17}, {215043, 18}, {15243, 17}, {105243, 16}, {150243, 15},
            {153240, 14}, {153204, 13}, {153024, 12}, {53124, 11}, {503124, 10},
            {530124, 11}, {534120, 12}, {534102, 11}, {534012, 12}, {34512, 13},
            {304512, 14}, {340512, 15}, {342510, 16}, {342501, 17}, {342051, 16},
            {42351, 15}, {402351, 14}, {420351, 15}, {421350, 14}, {421305, 13},
            {421035, 14}, {21435, 15}, {201435, 16}, {210435, 17}, {215430, 18},
            {231405, 15}, {231045, 16}, {31245, 15}, {301245, 14}, {310245, 13},
            {315240, 12}, {315204, 11}, {315024, 12}, {15324, 13}, {105324, 12},
            {150324, 13}, {154320, 14}, {154302, 13}, {154032, 12}, {54132, 11},
            {504132, 10}, {540132, 9}, {542130, 8}, {542103, 7}, {542013, 8},
            {42513, 7}, {402513, 6}, {420513, 7}, {423510, 8}, {423501, 9},
            {423051, 10}, {23451, 11}, {203451, 12}, {230451, 13}, {231450, 14},
            {403521, 10}, {43521, 11}, {543021, 12}, {543201, 13}, {543210, 14},
            {540213, 13}, {504213, 12}, {54213, 11}, {254013, 10}, {254103, 9},
            {254130, 10}, {250134, 9}, {205134, 8}, {25134, 9}, {125034, 10},
            {125304, 11}, {125340, 12}, {120345, 13}, {102345, 14}, {12345, 15},
            {312045, 16}, {312405, 15}, {312450, 14}, {310452, 13}, {301452, 12},
            {31452, 11}, {431052, 10}, {431502, 9}, {431520, 10}, {430521, 11},
            {450312, 12}
        };
        int id = 0;
        for (int i = 0; i < 2; ++i) {
            for (int j = 0; j < 3; ++j) {
                id = id * 10 + board[i][j];
            }
        }
        if (d.count(id)) {
            return d.at(id);
        } else {
            return -1; // Return -1 if configuration is not solvable or found
        }
    }
};
